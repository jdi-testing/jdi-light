language: java
before_install:
  - sudo apt-get -y install jq
  - java -Xmx32m -version
before_script:
  - ls -lah
  - google-chrome-stable --version
addons:
  chrome: stable
  apt:
    packages:
      - openjdk-8-jdk

env:
  global:
    - CHROME_PROPERTIES="chrome.properties"
    - WITH_PARAMS="-Ddriver=chrome -Dchrome.capabilities.path=$CHROME_PROPERTIES" #add -ntp when maven will be >=3.6.1 on travis
    - GROUP_ID="com.epam.jdi"
    - NOPO_TESTS="jdi-bdd-no-po-tests"
    - NOPO_TESTS_PROPERTY="test-examples/jdi-bdd-no-po-tests"
    - BDD_TESTS="jdi-bdd-tests"
    - BOOTSTRAP_TESTS="jdi-light-bootstrap-tests"
    - HTML_TESTS="jdi-light-html-tests"
    - ANGULAR_TESTS="jdi-light-angular-tests"
    - EXAMPLES="jdi-light-examples"
    - EXAMPLES_PROPERTY="test-examples/jdi-light-examples"
    - PERFORMANCE="jdi-performance"
    - PERFORMANCE_PROPERTY="test-examples/jdi-performance"
    - JDI_LIGHT_UNIT_TESTS="jdi-light"
    - CHROME_ARGS="--headless"
    - PATH="$JAVA_HOME/bin:$PATH"

stages:
  - prepare
  - compile
  - test
  - reports

testsbdd: &testsbdd
  stage: test
  name: "Run tests - bdd"
  script:
    - mvn -ntp install -DskipTests
    - echo arguments=$CHROME_ARGS > "./$BDD_TESTS/src/test/resources/$CHROME_PROPERTIES"
    - mvn verify $WITH_PARAMS -pl $GROUP_ID:$BDD_TESTS
    - echo "REPORT SCRIPT LINE 0"

testsbootstrap: &testsbootstrap
  stage: test
  name: "Run tests - bootstrap"
  script:
    - mvn -ntp install -DskipTests
    - echo arguments=$CHROME_ARGS > "./$BOOTSTRAP_TESTS/src/test/resources/$CHROME_PROPERTIES"
    - mvn verify $WITH_PARAMS -pl $GROUP_ID:$BOOTSTRAP_TESTS


testshtml: &testshtml
  stage: test
  name: "Run tests - html"
  script:
    - mvn -ntp install -DskipTests
    - echo arguments=$CHROME_ARGS > "./$HTML_TESTS/src/test/resources/$CHROME_PROPERTIES"
    - mvn verify $WITH_PARAMS -pl $GROUP_ID:$HTML_TESTS

testsexamples: &testsexamples
  stage: test
  name: "Run tests - examples"
  script:
    - mvn -ntp install -DskipTests
    - echo arguments=$CHROME_ARGS > "./$EXAMPLES_PROPERTY/src/test/resources/$CHROME_PROPERTIES"
    - mvn verify $WITH_PARAMS -pl $GROUP_ID:$EXAMPLES

testsperformance: &testsperformance
  stage: test
  name: "Run tests - performance"
  script:
    - mvn -ntp install -DskipTests
    - echo arguments=$CHROME_ARGS > "./$PERFORMANCE_PROPERTY/src/test/resources/$CHROME_PROPERTIES"
    - mvn verify $WITH_PARAMS -pl $GROUP_ID:$PERFORMANCE

jobs:
  include:
    - stage: prepare
      name: Welcome to jdi
      script:
        - echo ------------------- WELCOME TO JDI ----------------------
        - mvn --version #it is helpful

    - stage: compile
      name: Compile jdi code
      script:
        - mvn install -DskipTests

    - <<: *testsbdd
      name: "Run tests - bdd JDK8"
      jdk: openjdk8
      env:
        - JDK_VER="OpenJDK8"

    - <<: *testsbdd
      name: "Run tests - bdd JDK10"
      jdk: openjdk10
      env:
        - JDK_VER="OpenJDK10"

    - <<: *testsbdd
      name: "Run tests - bdd JDK11"
      jdk: openjdk11
      env:
        - JDK_VER="OpenJDK11"

    - <<: *testsbootstrap
      name: "Run tests - bootstrap JDK8"
      jdk: openjdk8
      env:
        - JDK_VER="OpenJDK8"

    - <<: *testsbootstrap
      name: "Run tests - bootstrap JDK10"
      jdk: openjdk10
      env:
        - JDK_VER="OpenJDK10"

    - <<: *testsbootstrap
      name: "Run tests - bootstrap JDK11"
      jdk: openjdk11
      env:
        - JDK_VER="OpenJDK11"

    # TODO: uncomment after angular module is added
    #    - stage: test
    #      name: Run tests -
    #      script:
    #        - mvn -ntp install -DskipTests
    #        - echo arguments=$CHROME_ARGS > "./$ANGULAR_TESTS/src/test/resources/$CHROME_PROPERTIES"
    #        - mvn verify $WITH_PARAMS -pl $GROUP_ID:$ANGULAR_TESTS

    - <<: *testshtml
      name: "Run tests - html JDK8"
      jdk: openjdk8
      env:
        - JDK_VER="OpenJDK8"

    - <<: *testshtml
      name: "Run tests - html JDK10"
      jdk: openjdk10
      env:
        - JDK_VER="OpenJDK10"

    - <<: *testshtml
      name: "Run tests - html JDK11"
      jdk: openjdk11
      env:
        - JDK_VER="OpenJDK11"

    - <<: *testsexamples
      name: "Run tests - examples JDK8"
      jdk: openjdk8
      env:
        - JDK_VER="OpenJDK8"

    - <<: *testsexamples
      name: "Run tests - examples JDK10"
      jdk: openjdk10
      env:
        - JDK_VER="OpenJDK10"

    - <<: *testsexamples
      name: "Run tests - examples JDK11"
      jdk: openjdk11
      env:
        - JDK_VER="OpenJDK11"

    - <<: *testsperformance
      name: "Run tests - performance JDK8"
      jdk: openjdk8
      env:
        - JDK_VER="OpenJDK8"

    - <<: *testsperformance
      name: "Run tests - performance JDK10"
      jdk: openjdk10
      env:
        - JDK_VER="OpenJDK10"

    - <<: *testsperformance
      name: "Run tests - performance JDK11"
      jdk: openjdk11
      env:
        - JDK_VER="OpenJDK11"

    - stage: reports
      name: Deploy allure reports to netlify
      script:
        - npm install -g allure-commandline
        - npm install -g netlify-cli
        - allure --version
        - source reports.sh
        - deployAllureResults
after_failure:
  - echo "Build was failed"
after_success:
  - echo "Build was successful"
after_script:
  - source reports.sh
  - grubAllureResults
  - du -d 1 -h ./
  - ls -la
# extra time during long builds
install:
  - travis_wait
